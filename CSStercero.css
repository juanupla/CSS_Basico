.texto{
    padding:20px;
}
/*vamos a usar pseudo-elementos  -- solo funcionan en inline-block o en block!!!!!!!*/

.texto::first-line{ /*los cambios solo afectan a la primera linea*/
    color:blue;
    font-size:4em;
}
.texto::first-letter{ /*los cambios solo afectan a al primera letra*/
    color:red;
}

/*placeholder  el que usualmente se suele usar como ATRIBUTO EN HTML para por ej, en un input dejar un texto predeterminado.. luego en css puede llamarse
 y usar el pseudoelemento ::placeholder para cambiar las propiedades de ese texto. por ej, darle un color
*/

form{
    padding:20px;
    margin: 100px auto;
    width:50%;
    background-color:gray;
    top:50px;
    display:block;
}
input{
    padding:6px;
    width:100%;
    margin-top:30px;
}

input::placeholder{
    color : red;
    background:black;
}

input::selection{
    color:#00ff21 /*el selection es similar a placeholder pero el efecto es cuando seleccionamos el texto*/
}

/*los pseudoelementos after y before no existen en el dom (comprobar que al seleccionar no se va a poder*/

.before::before{
    font-size:20px;
    content:"esto aparece antes pa y no se puede seleccionar porque no es parte del dom. usa pseudoelemento before en css cuya propiedad para escribir es content: ' '";
    background:red;
}
.before{
    background:green;
}

.before::after{
    content:". Esto tampoco se puede seleccionar, es un after y no forma parte del dom";
    background:yellow;

}

/*pseudoelementos! hay una breve descripcion del lado de html (en pantalla)*/

.caja1 {
    width: 250px;
    height: 250px;
    background: #3eff3e;
    margin: 0 150px 2px;
    margin-bottom:10px;

}


.caja2 {
    width: 250px;
    height: 250px;
    background: #3eff3e;
    margin: 0px 150px;
    box-sizing: content-box;
    position: relative;
    transition: width 0.2s, height 0.4s, background 0.7s, border 1s; /*para que cuando se ejecute el .caja2:hover no sea de repente, se genera una transición.- también
        puede ser transition: 1s y afectará a todos sus componentes por igual
    */
}

.caja2:hover{ /*:hover es un pseudoelemento que escucha el elemento cuando el cursor pasa por encima!!*/
   width: 350px;
   height: 350px;
   background:#0d138d;
   border: 3px solid #eb0e0e;
}

.boton{
    width:200px;
    height:200px;
    background:#284aa9;
    font-family:Gabriola;
    font-size:20px;
    margin: 15px 150px;
    transition:0.3s;
    color:white;
}

.boton:hover{
    width:180px;
    height:180px;
    background:#10b4aa;
    color:black;
}

/*pseudoelemento :link*/

.link1:link{
    color:red;
}

.link1:visited{
    color:black;
}

/*pseudoelemento :active*/

.active {
    width: 200px;
    height: 200px;
    background: #284aa9;
    font-family:'Times New Roman', Times, serif;
    font-size: 25px;
    margin: 15px 150px;
    transition: 0.3s;
    color: white;
}

.active:active{
    background:black;  /*la pseudclae :active solo funcionara cuando se esté haciendo click sobre el elemento y se lo mantenga apretado*/
}

/*pseudoelemento :focus que básicamente se activa cuando hay foco por parte del usuario en algún elemento. Se utilizan mucho con los inputs*/

.divinput {
    width: 200px;
    height: 200px;
    padding: 10px 10px;
    background: black;
    box-sizing: content-box;
}
.input{
    
    width:150px;
    background:gray;
}

.input:focus{
    background:white
}


/*pseudoelemento :lang(ES) sirve para realizar cambios detectando el idioma. para ello, nosotros del ladode css debemos inluir el atributo
    lang="esp" por ejemplo, para identificar a ese segmento como español*/

.lang:lang(es){
    background:#284aa9;
}

.lang2:lang(en) {
    background: #bfab0e;
}

/*vamos a ver para qué sirve le object-fit: 
    que pueden ser fil, contain, cover , none, scale-down
*/

.cont{
    width: 500px;
    height: 350px;
    cursor:pointer; /*explica mas adelante*/
}

.cont img{
        width: 100%;
        height: 100%;
        border: 3px solid blue;
        object-fit: cover; /*el cover usara todo el tamaño de la caja pero sin distorsionar la imagen, solo hara zoom y recortará los bordes. se ajusta al contenido*/
        object-position: left; /*explicación mas abajo.. (la imagen se ajusta en la izquierda y recorta mas en la derecha - probar comentando esta propiedad y ver el cambio)*/
}

.contenedor{
    width:500px;
    height: 350px;
    display: inline-block;
}

.contenedor img{
    width: 100%;
    height: 100%;
    border: 3px solid red;
    object-fit: contain; /*el containt ajustara la imagen dejando su resolucion y por ende dejara margenes en nuesto contenedor*/
}
/* none usa el tamaño por defecto. colocará la imagen con las resoluciones reales... y otro es el scale-down que ajusta la imagen según cómo lo crea 
    conveniente. 
*/

/*también existe una propiedad que está mas arriba que es object-position 
    las cuales pueden ser right, left, top, buttom.. usando estas si elegimor left y además tenemos un object-fin: cover, ese zoom que hará poara ajustar la imagen
    recortara mas del  lado derecho y se verá bien claro la parte izquierda de la imagen, en este caso.

    también puede ser px, o em en la definicion de object-position.. 
*/

/*vemos ahora la propiedad cursor: , lógicamente modifica en cursor según lo que se defina en esa propiedad
    muy utilizadas en las cajas contenedoras, que al pasar por encima de ellas modifica el cursor. También muy utilizadas con las
    cajas y la pseudoclase :active que ejecutará la modificacion únicamente cuando se este haciendo click
*/

.cont:active{
    cursor:default;
}

/*nota: existe una definicion para las propiedades de colores, como background: .. que se llama  rgb(0,0,0) 
    podemos definir colores´segun deseamos, mesclando 3 colores rgb-> red, green, blue
    ej: background-color: rgb(134,45,88) la escala es de 0 a 255
    también exíste rgba(0,0,0,0.5) agrega el último parametro donde defina la opacidad
*/




/*hasta acá llegamos. en cssCuarto empezamos con responsive design - Mobile first*/